# Sample Titanic dataset
data = [
    [3, 'male', 22, 1, 0, 7.25, 'S', 0],
    [1, 'female', 38, 1, 0, 71.2833, 'C', 1],
    [3, 'female', 26, 0, 0, 7.925, 'S', 1],
    [1, 'female', 35, 1, 0, 53.1, 'S', 1],
    [3, 'male', 28, 0, 0, 8.05, 'S', 0],
    
]

# Preprocessing
def fill_missing_age_age(median_age, age):
    if age:
        return age
    return median_age

def fill_missing_embarked(embarked):
    if embarked:
        return embarked
    return 'S'

def map_sex(sex):
    return 1 if sex == 'male' else 0

def map_embarked(embarked):
    return {'S': 0, 'C': 1, 'Q': 2}.get(embarked, 0)

median_age = 28.0  # Median age from the dataset
for entry in data:
    entry[2] = fill_missing_age_age(median_age, entry[2])
    entry[6] = fill_missing_embarked(entry[6])
    entry[1] = map_sex(entry[1])
    entry[6] = map_embarked(entry[6])

# Define features and target variable
features = ["Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked"]
X = [entry[:-1] for entry in data]
y = [entry[-1] for entry in data]

# Split the dataset
split_ratio = 0.2
split_index = int(len(X) * (1 - split_ratio))
X_train, X_test = X[:split_index], X[split_index:]
y_train, y_test = y[:split_index], y[split_index:]

# Create a simple decision rule model
def simple_decision_rule(features):
    pclass, sex, age, sibsp, parch, fare, embarked = features
    if sex == 0 and age < 18:
        return 1
    if pclass == 1 and fare > 50:
        return 1
    return 0

# Make predictions
predictions = [simple_decision_rule(entry) for entry in X_test]

# Evaluate the model
correct_predictions = sum(1 for pred, actual in zip(predictions, y_test) if pred == actual)
accuracy = correct_predictions / len(y_test)
print("Accuracy:", accuracy)




#output:
Accuracy: 1.0
